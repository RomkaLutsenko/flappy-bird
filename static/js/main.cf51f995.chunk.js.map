{"version":3,"sources":["constants.ts","components/EndDialog.tsx","components/Game.tsx","components/App.tsx","index.tsx"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","CLOUDS","Image","src","BIRD","GROUND","PIPE_WIDTH","PIPE_GAP","EndDialog","props","_jsxs","Dialog","open","showDialog","disableEscapeKeyDown","children","_jsx","DialogContent","DialogContentText","id","score","bestScore","DialogActions","Button","onClick","window","location","reload","color","groundX","birdY","birdYSpeed","pipeGapBottomY","pipeX","constants","parseInt","localStorage","getItem","checkCollision","circle","rect","x","radius","width","y","height","hasStarted","hasFinished","canGetScore","Game","showModal","setShowModal","useState","canvas","useRef","jump","useEventListener","key","code","useEffect","current","context","getContext","setInterval","touchedPipe","birdHitbox","birdX","lowerPipe","setItem","toString","fillStyle","fillRect","drawImage","draw","Math","random","font","fillText","onKeyPress","ref","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf51f995.chunk.js","sourcesContent":["export const INTERVAL = 20\nexport const CANVAS_WIDTH = 300\nexport const CANVAS_HEIGHT = 450\n\n// clouds\nexport const CLOUDS = new Image()\nCLOUDS.src = \"./images/clouds.png\"\nexport const CLOUDS_HEIGHT = 280\nexport const CLOUDS_WIDTH = 300\nexport const CLOUDS_X = 0\nexport const CLOUDS_Y = 0\n\n// bird\nexport const BIRD = new Image()\nBIRD.src = \"./images/bird.png\"\nexport const BIRD_HEIGHT = 50\nexport const BIRD_WIDTH = 50\n\n// ground\nexport const GROUND = new Image()\nGROUND.src = \"./images/ground.png\"\nexport const GROUND_HEIGHT = 200\nexport const GROUND_WIDTH = CANVAS_WIDTH\nexport const GROUND_Y = CANVAS_HEIGHT-GROUND_HEIGHT\nexport const HEIGHT_GROUND = 59\n\n// pipes\nexport const PIPE_WIDTH = 40\nexport const PIPE_HEIGHT = CANVAS_HEIGHT / 2\nexport const PIPE_GAP = CANVAS_HEIGHT / 2 - HEIGHT_GROUND - 50\n\n// movements\nexport const JUMP_SPEED = -200\nexport const FALL_SPEED = -800\nexport const SPEED = 2","import { Dialog, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\n\n\nfunction EndDialog(props: {showDialog: boolean, score: number, bestScore: number}) {\n  return (\n    <Dialog\n        open={props.showDialog}\n        disableEscapeKeyDown\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Score: {props.score} &nbsp; \n            Best: {props.bestScore}\n          </DialogContentText>\n        </DialogContent>\n\n        <DialogActions>\n          <Button onClick={() => window.location.reload()} color=\"primary\">\n            Restart\n          </Button>\n        </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default EndDialog","import useEventListener from '@use-it/event-listener'\nimport { useEffect, useRef, useState } from 'react'\nimport * as constants from '../constants'\nimport { Circle, Rectangle } from '../types'\nimport EndDialog from './EndDialog'\n\n// ground\nlet groundX = 0\n\n// bird\nlet birdX = 60\nlet birdY = 120\nlet birdYSpeed = 0\n\n// pipes\nlet pipeGapBottomY = constants.PIPE_HEIGHT\nlet pipeX = constants.CANVAS_WIDTH\n\n// score\nlet score: number = 0\nlet bestScore: number = parseInt(localStorage.getItem('bestScore') || '0')\n\n// check collision between circle and rectangle\nconst checkCollision = (circle: Circle, rect: Rectangle) => {\n\tif (\n\t\tcircle.x + circle.radius >= rect.x &&\n\t\tcircle.x - circle.radius <= rect.x + rect.width\n\t) {\n\t\tif (\n\t\t\tcircle.y + circle.radius >= rect.y &&\n\t\t\tcircle.y - circle.radius <= rect.y + rect.height\n\t\t) {\n\t\t\t// TODO: IMPROVE COLLISION CHECK\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// check if bird has touched a pipe\nconst touchedPipe = () => {\n\tconst birdHitbox: Circle = {\n\t\tx: birdX + constants.BIRD_WIDTH / 2,\n\t\ty: birdY + constants.BIRD_HEIGHT / 2 + 5,\n\t\tradius: 20,\n\t}\n\n\tconst upperPipe: Rectangle = {\n\t\tx: pipeX,\n\t\ty: 0,\n\t\twidth: constants.PIPE_WIDTH,\n\t\theight: pipeGapBottomY,\n\t}\n\n\tconst lowerPipe: Rectangle = {\n\t\tx: pipeX,\n\t\ty: pipeGapBottomY + constants.PIPE_GAP,\n\t\twidth: constants.PIPE_WIDTH,\n\t\theight:\n\t\t\tconstants.CANVAS_HEIGHT -\n\t\t\tconstants.HEIGHT_GROUND -\n\t\t\t(pipeGapBottomY + constants.PIPE_GAP),\n\t}\n\n\treturn (\n\t\tcheckCollision(birdHitbox, upperPipe) ||\n\t\tcheckCollision(birdHitbox, lowerPipe)\n\t)\n}\n\n// check if bird has touched the ground\nconst fallOut = () =>\n\tbirdY + constants.BIRD_HEIGHT >\n\tconstants.CANVAS_HEIGHT - constants.HEIGHT_GROUND\n\n// stop game\nconst reset = () => {\n\thasStarted = false\n\thasFinished = true\n}\n\nlet hasStarted = false\nlet hasFinished = false\nlet canGetScore = true\n\nfunction Game() {\n\tconst [showModal, setShowModal] = useState<boolean>(false)\n\tconst canvas = useRef<HTMLCanvasElement>(null)\n\n\t// bird jump\n\tconst jump = () => {\n\t\tif (hasFinished) {\n\t\t\treturn\n\t\t}\n\t\tif (!hasStarted) {\n\t\t\thasStarted = true\n\t\t}\n\t\tbirdYSpeed = constants.JUMP_SPEED\n\t}\n\n\t// enable space button\n\tconst handler = (key: any) => {\n\t\tif (hasFinished) {\n\t\t\treturn\n\t\t}\n\t\tif (key.code === 'Space') {\n\t\t\tif (!hasStarted) {\n\t\t\t\thasStarted = true\n\t\t\t}\n\t\t\tjump()\n\t\t}\n\t}\n\n\tuseEventListener('keypress', handler)\n\n\tconst draw = (context: CanvasRenderingContext2D) => {\n\t\t// draw background\n\t\tcontext.fillStyle = '#abfcff'\n\t\tcontext.fillRect(0, 0, constants.CANVAS_WIDTH, constants.CANVAS_HEIGHT)\n\n\t\t// draw clouds\n\t\tcontext.drawImage(\n\t\t\tconstants.CLOUDS,\n\t\t\tconstants.CLOUDS_X,\n\t\t\tconstants.CLOUDS_Y,\n\t\t\tconstants.CLOUDS_WIDTH,\n\t\t\tconstants.CLOUDS_HEIGHT\n\t\t)\n\n\t\t// draw ground\n\t\tcontext.drawImage(\n\t\t\tconstants.GROUND,\n\t\t\tgroundX,\n\t\t\tconstants.GROUND_Y,\n\t\t\tconstants.GROUND_WIDTH,\n\t\t\tconstants.GROUND_HEIGHT\n\t\t)\n\t\tcontext.drawImage(\n\t\t\tconstants.GROUND,\n\t\t\tgroundX + constants.CANVAS_WIDTH,\n\t\t\tconstants.GROUND_Y,\n\t\t\tconstants.GROUND_WIDTH,\n\t\t\tconstants.GROUND_HEIGHT\n\t\t)\n\n\t\t// draw bird\n\t\tcontext.drawImage(\n\t\t\tconstants.BIRD,\n\t\t\tbirdX,\n\t\t\tbirdY,\n\t\t\tconstants.BIRD_WIDTH,\n\t\t\tconstants.BIRD_HEIGHT\n\t\t)\n\n\t\t// draw pipes\n\t\tcontext.fillStyle = '#a6a6a6'\n\t\tcontext.fillRect(pipeX, 0, constants.PIPE_WIDTH, pipeGapBottomY)\n\t\tcontext.fillRect(\n\t\t\tpipeX,\n\t\t\tpipeGapBottomY + constants.PIPE_GAP,\n\t\t\tconstants.PIPE_WIDTH,\n\t\t\tconstants.CANVAS_HEIGHT -\n\t\t\t\tconstants.HEIGHT_GROUND -\n\t\t\t\t(pipeGapBottomY + constants.PIPE_GAP)\n\t\t)\n\t}\n\n\tuseEffect(() => {\n\t\tif (canvas.current) {\n\t\t\tconst context = canvas.current.getContext('2d')\n\t\t\tif (context) {\n\t\t\t\tsetInterval(() => {\n\t\t\t\t\t// dying\n\t\t\t\t\tif (touchedPipe() || fallOut()) {\n\t\t\t\t\t\tif (score > bestScore) {\n\t\t\t\t\t\t\tbestScore = score\n\t\t\t\t\t\t\tlocalStorage.setItem('bestScore', score.toString())\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetShowModal(true)\n\t\t\t\t\t\treset()\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if we should give another score\n\t\t\t\t\tif (canGetScore && birdX > pipeX + constants.PIPE_WIDTH) {\n\t\t\t\t\t\tcanGetScore = false\n\t\t\t\t\t\tscore++\n\t\t\t\t\t}\n\n\t\t\t\t\tdraw(context)\n\n\t\t\t\t\tif (!hasStarted) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\t// reset pipes\n\t\t\t\t\tif (pipeX < -constants.PIPE_WIDTH) {\n\t\t\t\t\t\tpipeX = constants.CANVAS_WIDTH\n\t\t\t\t\t\tpipeGapBottomY = constants.PIPE_GAP * Math.random()\n\t\t\t\t\t\tcanGetScore = true\n\t\t\t\t\t}\n\n\t\t\t\t\t// reset ground\n\t\t\t\t\tif (groundX <= -constants.CANVAS_WIDTH) {\n\t\t\t\t\t\tgroundX = 0\n\t\t\t\t\t}\n\n\t\t\t\t\t// draw scores\n\t\t\t\t\tcontext.fillStyle = 'black'\n\t\t\t\t\tcontext.font = '26px Roboto'\n\t\t\t\t\tcontext.fillText(\n\t\t\t\t\t\tscore.toString(),\n\t\t\t\t\t\tconstants.CANVAS_WIDTH / 2 - 15,\n\t\t\t\t\t\t50\n\t\t\t\t\t)\n\n\t\t\t\t\t// movements\n\t\t\t\t\tpipeX -= constants.SPEED\n\t\t\t\t\tgroundX -= constants.SPEED\n\t\t\t\t\tbirdY += birdYSpeed * (constants.INTERVAL / 1000)\n\t\t\t\t\tbirdYSpeed -= constants.FALL_SPEED * (constants.INTERVAL / 1000)\n\t\t\t\t}, constants.INTERVAL)\n\t\t\t}\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<div onClick={jump} onKeyPress={jump}>\n\t\t\t<canvas\n\t\t\t\tref={canvas}\n\t\t\t\twidth={constants.CANVAS_WIDTH}\n\t\t\t\theight={constants.CANVAS_HEIGHT}\n\t\t\t/>\n\t\t\t<EndDialog\n\t\t\t\tshowDialog={showModal}\n\t\t\t\tscore={score}\n\t\t\t\tbestScore={bestScore}\n\t\t\t></EndDialog>\n\t\t</div>\n\t)\n}\n\nexport default Game\n","import Game from './Game'\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<p>Tap, click or space!</p>\n\t\t\t<Game />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}